// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vehicle.proto

package backend

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Vehicle struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image  string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Weight string `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Lwh    string `protobuf:"bytes,5,opt,name=lwh,proto3" json:"lwh,omitempty"`
	Cube   string `protobuf:"bytes,6,opt,name=cube,proto3" json:"cube,omitempty"`
	Price  *Price `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *Vehicle) Reset()         { *m = Vehicle{} }
func (m *Vehicle) String() string { return proto.CompactTextString(m) }
func (*Vehicle) ProtoMessage()    {}
func (*Vehicle) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{0}
}
func (m *Vehicle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vehicle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vehicle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vehicle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vehicle.Merge(m, src)
}
func (m *Vehicle) XXX_Size() int {
	return m.Size()
}
func (m *Vehicle) XXX_DiscardUnknown() {
	xxx_messageInfo_Vehicle.DiscardUnknown(m)
}

var xxx_messageInfo_Vehicle proto.InternalMessageInfo

func (m *Vehicle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vehicle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vehicle) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Vehicle) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Vehicle) GetLwh() string {
	if m != nil {
		return m.Lwh
	}
	return ""
}

func (m *Vehicle) GetCube() string {
	if m != nil {
		return m.Cube
	}
	return ""
}

func (m *Vehicle) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

type Price struct {
	Start *Start  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Then  float32 `protobuf:"fixed32,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{1}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetStart() *Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Price) GetThen() float32 {
	if m != nil {
		return m.Then
	}
	return 0
}

type Start struct {
	Distance int32   `protobuf:"varint,1,opt,name=distance,proto3" json:"distance,omitempty"`
	Fee      float32 `protobuf:"fixed32,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *Start) Reset()         { *m = Start{} }
func (m *Start) String() string { return proto.CompactTextString(m) }
func (*Start) ProtoMessage()    {}
func (*Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{2}
}
func (m *Start) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Start.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Start.Merge(m, src)
}
func (m *Start) XXX_Size() int {
	return m.Size()
}
func (m *Start) XXX_DiscardUnknown() {
	xxx_messageInfo_Start.DiscardUnknown(m)
}

var xxx_messageInfo_Start proto.InternalMessageInfo

func (m *Start) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *Start) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func init() {
	proto.RegisterType((*Vehicle)(nil), "backend.Vehicle")
	proto.RegisterType((*Price)(nil), "backend.Price")
	proto.RegisterType((*Start)(nil), "backend.Start")
}

func init() { proto.RegisterFile("vehicle.proto", fileDescriptor_416ab71f8212867c) }

var fileDescriptor_416ab71f8212867c = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xcf, 0x4a, 0xfb, 0x40,
	0x18, 0xcc, 0xa6, 0x4d, 0xdb, 0xdf, 0xf7, 0xc3, 0x52, 0x16, 0x29, 0x4b, 0x85, 0xa5, 0x04, 0x0f,
	0x3d, 0x6d, 0xa5, 0xea, 0x5d, 0x05, 0x6f, 0x1e, 0x24, 0x82, 0xf7, 0xfc, 0xf9, 0x9a, 0x2c, 0xb6,
	0x49, 0x69, 0xb6, 0x16, 0xdf, 0xc2, 0xb7, 0xf0, 0x55, 0x3c, 0xf6, 0xe8, 0x51, 0xda, 0x17, 0x91,
	0xfd, 0x36, 0x16, 0x6f, 0x33, 0xb3, 0x33, 0xdf, 0x0e, 0x03, 0x27, 0xaf, 0x58, 0xe8, 0x74, 0x81,
	0x6a, 0xb5, 0xae, 0x4c, 0xc5, 0xbb, 0x49, 0x9c, 0xbe, 0x60, 0x99, 0x8d, 0xce, 0xf2, 0xaa, 0xca,
	0x17, 0x38, 0x25, 0x39, 0xd9, 0xcc, 0xa7, 0xb8, 0x5c, 0x99, 0x37, 0xe7, 0x0a, 0x3f, 0x18, 0x74,
	0x9f, 0x5d, 0x8e, 0xf7, 0xc1, 0xd7, 0x99, 0x60, 0x63, 0x36, 0xf9, 0x17, 0xf9, 0x3a, 0xe3, 0x1c,
	0xda, 0x65, 0xbc, 0x44, 0xe1, 0x93, 0x42, 0x98, 0x9f, 0x42, 0xa0, 0x97, 0x71, 0x8e, 0xa2, 0x45,
	0xa2, 0x23, 0x7c, 0x08, 0x9d, 0x2d, 0xea, 0xbc, 0x30, 0xa2, 0x4d, 0x72, 0xc3, 0xf8, 0x00, 0x5a,
	0x8b, 0x6d, 0x21, 0x02, 0x12, 0x2d, 0xb4, 0x37, 0xd3, 0x4d, 0x82, 0xa2, 0xe3, 0x6e, 0x5a, 0xcc,
	0xcf, 0x21, 0x58, 0xad, 0x75, 0x8a, 0xa2, 0x3b, 0x66, 0x93, 0xff, 0xb3, 0xbe, 0x6a, 0x9a, 0xab,
	0x47, 0xab, 0x46, 0xee, 0x31, 0xbc, 0x85, 0x80, 0xb8, 0xb5, 0xd7, 0x26, 0x5e, 0x1b, 0x6a, 0xfa,
	0xd7, 0xfe, 0x64, 0xd5, 0xc8, 0x3d, 0xda, 0x8f, 0x4c, 0x81, 0x25, 0x95, 0xf7, 0x23, 0xc2, 0xe1,
	0x35, 0x04, 0xe4, 0xe1, 0x23, 0xe8, 0x65, 0xba, 0x36, 0x71, 0x99, 0x22, 0x5d, 0x09, 0xa2, 0x23,
	0xb7, 0x9d, 0xe7, 0x88, 0x4d, 0xce, 0xc2, 0xd9, 0x0d, 0xf4, 0x9a, 0x89, 0x6a, 0x7e, 0x05, 0xed,
	0x07, 0x5d, 0x1b, 0x3e, 0x54, 0x6e, 0x55, 0xf5, 0xbb, 0xaa, 0xba, 0xb7, 0xab, 0x8e, 0x06, 0xc7,
	0x36, 0x4d, 0x24, 0xf4, 0x2e, 0xd8, 0x9d, 0xf8, 0xdc, 0x4b, 0xb6, 0xdb, 0x4b, 0xf6, 0xbd, 0x97,
	0xec, 0xfd, 0x20, 0xbd, 0xdd, 0x41, 0x7a, 0x5f, 0x07, 0xe9, 0x25, 0x1d, 0xca, 0x5f, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x16, 0x6f, 0xde, 0xdf, 0xbd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VehiclesClient is the client API for Vehicles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VehiclesClient interface {
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Vehicles_ListClient, error)
}

type vehiclesClient struct {
	cc *grpc.ClientConn
}

func NewVehiclesClient(cc *grpc.ClientConn) VehiclesClient {
	return &vehiclesClient{cc}
}

func (c *vehiclesClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Vehicles_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Vehicles_serviceDesc.Streams[0], "/backend.Vehicles/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehiclesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vehicles_ListClient interface {
	Recv() (*Vehicle, error)
	grpc.ClientStream
}

type vehiclesListClient struct {
	grpc.ClientStream
}

func (x *vehiclesListClient) Recv() (*Vehicle, error) {
	m := new(Vehicle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VehiclesServer is the server API for Vehicles service.
type VehiclesServer interface {
	List(*types.Empty, Vehicles_ListServer) error
}

func RegisterVehiclesServer(s *grpc.Server, srv VehiclesServer) {
	s.RegisterService(&_Vehicles_serviceDesc, srv)
}

func _Vehicles_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehiclesServer).List(m, &vehiclesListServer{stream})
}

type Vehicles_ListServer interface {
	Send(*Vehicle) error
	grpc.ServerStream
}

type vehiclesListServer struct {
	grpc.ServerStream
}

func (x *vehiclesListServer) Send(m *Vehicle) error {
	return x.ServerStream.SendMsg(m)
}

var _Vehicles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.Vehicles",
	HandlerType: (*VehiclesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Vehicles_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vehicle.proto",
}

func (m *Vehicle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vehicle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Weight) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Weight)))
		i += copy(dAtA[i:], m.Weight)
	}
	if len(m.Lwh) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Lwh)))
		i += copy(dAtA[i:], m.Lwh)
	}
	if len(m.Cube) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(len(m.Cube)))
		i += copy(dAtA[i:], m.Cube)
	}
	if m.Price != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(m.Price.Size()))
		n1, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(m.Start.Size()))
		n2, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Then != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Then))))
		i += 4
	}
	return i, nil
}

func (m *Start) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Start) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Distance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVehicle(dAtA, i, uint64(m.Distance))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fee))))
		i += 4
	}
	return i, nil
}

func encodeVarintVehicle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Vehicle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	l = len(m.Lwh)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	l = len(m.Cube)
	if l > 0 {
		n += 1 + l + sovVehicle(uint64(l))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovVehicle(uint64(l))
	}
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovVehicle(uint64(l))
	}
	if m.Then != 0 {
		n += 5
	}
	return n
}

func (m *Start) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Distance != 0 {
		n += 1 + sovVehicle(uint64(m.Distance))
	}
	if m.Fee != 0 {
		n += 5
	}
	return n
}

func sovVehicle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVehicle(x uint64) (n int) {
	return sovVehicle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vehicle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVehicle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vehicle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vehicle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lwh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lwh = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cube", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cube = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &Price{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVehicle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVehicle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVehicle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVehicle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &Start{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Then", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Then = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipVehicle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Start) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVehicle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Start: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Start: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			m.Distance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fee = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipVehicle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVehicle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVehicle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVehicle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVehicle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVehicle
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVehicle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVehicle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVehicle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVehicle
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVehicle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVehicle   = fmt.Errorf("proto: integer overflow")
)
